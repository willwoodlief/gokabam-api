http://viima.github.io/jquery-comments/  for user comments

https://speckyboy.com/plugins-for-extending-bootstrap/ toy store

https://getbootstrap.com/docs/3.3/components/ bs ref
----------------

JournalEditor
api: get_journals, update_journal, update_journal_tags, create_journal
js api:
    $(div).journal_editor({container_id:})
                         "destroy"
                         "set_journals" [{jid,text,tag_array}]
                         "set_current_tags"
                         "get_current_tags"
                          event: "on_tags_changed"
  GUI:
       text edit area
       tag edit area
       buttons new/save
       List older
          text/tags/when/version

JournalSearch
api: search_journals
js_api:
    $(div).journal_search()
            "destroy"
            "set_filter_tags(all:sub)"  //replace all tags or just the previous filter tags (user can add filter tags in the gui)

GUI:
      tag_filters: search_text:
      list results
          text,tag,version,date

JournalDisplay
js api $(div).journal_display({text:,tag_array,version:,when:})



api:
    create family, update family, delete button, create api, list api
|family                                         |journal                                |api list
                                                first just a sample journal display       <input api name> button to add
create family                                                                               # will fresh api list after creating
   <input family name> <button add>                                                             links to each api
   <family list>
     name
     description
     //select it and the journal comes up,
      //and the list of apis associated with it
       //are displayed
       //also with delete button

    # family has an all which will display
     #the api list for everything in alpha order
-----------------------------
api family
<div>

---------------------------------------


				'gokabam_api_tags',
				'gokabam_api_journals',
				'gokabam_api_data_elements',

				'gokabam_api_data_groups',

				'gokabam_api_data_group_examples',
				'gokabam_api_inputs',
				'gokabam_api_outputs',
				'gokabam_api_output_headers',
				'gokabam_api_use_cases',
				'gokabam_api_use_case_parts'


json output
notes:
    kid is the hash of the object id, it can be used to query and to cross reference

versions
    hash of [kid]=>version (order versions by datetime in browser)

data_elements
    hash of [data  elements kid] => they have all element objects in here, but each element object has its own kid
data_groups
    hash of [data group kid] => includes all members whith their kid,
                                    and each member references the data element [kids]
                                    and include all examples with their [kids]


api versions
        hash of [kid]=> api versions
                            includes headers that are for all outcalls [kid]
api families
    hash of [kid]=> api family, each reference api version [kid]
apis
    hash of [kid]=> apis, each reference family [kid]
                    includes inputs, outputs with their [kid] (and the headers associated with the outputs]
                    includes headers that are only associated with the apis

use cases => hash of [kid]
                includes parts with reference all the other stuff with [kid]

journals
            => hash kid, and has the entry, the timestamp, and the [kid] its attached to

tags
    => tags kid, with the label, value and an array of the kids its attached to


development
    make api and test with postman
     all apis still go through the public ajax method on wordpress
      the the method name is actually the param called method

    api list to make
    get_state:
        can pass in nothing and get full tree
        can filter by type and by relationship to a [kid]
        can pass in between times to get the things that were only modified since a timestamp

    update_kid
        a single update for all the differnet things. Pass in KID and all revavent information
          if there is a field that is not supposed to be there, then will return with an error

    create:
        create_this: what to create, and params for initial info
            will error out if params are not enough for what is being created
            will return the info and hashes of what is created

         ---
         SELECT HEX(INET6_ATON('127.0.0.1')); // output: 7f000001 (hexadecimal)

         SELECT INET6_NTOA(ip); // output: 127.0.0.1 (string)
         /////////////////




